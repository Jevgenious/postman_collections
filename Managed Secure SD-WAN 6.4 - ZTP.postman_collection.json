{
	"info": {
		"_postman_id": "9daf36c7-c93d-4bad-a764-d135b306efd7",
		"name": "Managed Secure SD-WAN 6.4 - ZTP",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1 - Add Device",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "64764712-8411-4fef-8cc2-6c184c8e5a1f",
						"exec": [
							"function waitOnTask(retries) {",
							"    if (!retries) {",
							"        pm.test(\"Task completed\", function() {",
							"            pm.expect(0).to.equal(1, \"Timeout while waiting for task completion\");     ",
							"        });",
							"        postman.setNextRequest(null);",
							"    }",
							"    else {",
							"        pm.sendRequest({",
							"            url: \"https://\" + pm.environment.get(\"ip\") + \"/jsonrpc\",",
							"            method: 'POST',",
							"            header: \"Content-Type:application/json\",",
							"            body: {",
							"                mode: 'raw',",
							"                raw: JSON.stringify({\"session\": pm.environment.get(\"session\"), \"id\": 1, \"method\": \"get\",\"params\": [{\"url\": \"/task/task/\" + taskid}]})",
							"            }",
							"        }, function(err, response) {",
							"            var jsonData = response.json();",
							"            if (jsonData.result[0].data.percent == 100) {",
							"                // Task completed",
							"                if (jsonData.result[0].data.num_err) {",
							"                    postman.setNextRequest(null);",
							"                }",
							"                pm.test(\"Task completed\", function() {",
							"                    pm.expect(jsonData.result[0].data.num_err).to.equal(0, \"Failed to add some devices\");     ",
							"                });",
							"            }",
							"            else {",
							"                console.log(\"Task is still not complete\");",
							"                setTimeout(function() {",
							"                    waitOnTask(--retries);",
							"                }, 10000);",
							"            }",
							"        }); ",
							"    }",
							"}",
							"",
							"var jsonData = pm.response.json();",
							"var taskid = jsonData.result[0].data.taskid;",
							"",
							"waitOnTask(10);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": 1,\n    \"session\": \"{{session}}\",\n    \"method\": \"exec\",\n    \"params\": [\n        {\n            \"url\": \"dvm/cmd/add/device\",\n            \"data\": {\n                \"adom\": \"{{adom}}\",\n                \"flags\": [\n                    \"create_task\",\n                    \"nonblocking\"\n                ],\n                \"device\": {\n                    \"name\": \"{{name_ztp_fgt}}\",\n                    \"adm_usr\": \"admin\",\n                    \"os_ver\": 6,\n                    \"version\": 600,\n                    \"os_type\": 0,\n                    \"mr\": 4,\n                    \"platform_str\": \"FortiGate-VM64\",\n                    \"mgmt_mode\": 3,\n                    \"flags\": 67371040,\n                    \"prefer_img_ver\": null,\n                    \"sn\": \"FGVM08TM19003257\",\n                    \"faz.perm\": 15,\n                    \"faz.quota\": 0,\n                    \"platform_id\": 108,\n                    \"branch_pt\": 1637,\n                    \"build\": 1637\n                },\n                \"groups\": [\n                    {\n                        \"adom\": \"{{adom}}\",\n                        \"name\": \"Spokes\"\n                    }\n                ]\n            }\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{ip}}/jsonrpc",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"path": [
						"jsonrpc"
					]
				}
			},
			"response": []
		},
		{
			"name": "2 - Set Device Properties",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "de25b025-6ab7-49b7-af02-cd624dd5fa30",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"1\",\n    \"session\": \"{{session}}\",\n    \"method\": \"update\",\n    \"params\": [\n        {\n            \"url\": \"/dvmdb/adom/{{adom}}/device/{{name_ztp_fgt}}\",\n            \"data\": {\n                \"name\": \"{{name_ztp_fgt}}\",\n                \"latitude\": \"40.418852\",\n                \"longitude\": \" -3.693454\",\n                \"meta fields\": {\n                    \"Address\": \"Madrid, Spain\",\n                    \"branch-id\": \"3\",\n                    \"dc-id\": \"\",\n                    \"remote-dc-id\": \"\"\n                },\n                \"flags\": 69468192\n            }\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{ip}}/jsonrpc",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"path": [
						"jsonrpc"
					]
				}
			},
			"response": []
		},
		{
			"name": "3 - Assign SDWAN Template",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c3350643-9063-44d1-bfe1-b911aca496ab",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"session\": \"{{session}}\",\n    \"id\": 1,\n    \"method\": \"update\",\n    \"params\": [\n        {\n            \"url\": \"/pm/wanprof/adom/{{adom}}/sdwan.branches\",\n            \"data\": {\n                \"name\": \"sdwan.branches\",\n                \"description\": \"\",\n                \"scope member\": [\n                    {\n                    \t\"name\": \"{{name_fgt_1}}\",\n                    \t\"vdom\": \"root\"\n                    },\n                    {\n                    \t\"name\": \"{{name_fgt_2}}\",\n                    \t\"vdom\": \"root\"\n                    },\n                    {\n                    \t\"name\": \"{{name_ztp_fgt}}\",\n                    \t\"vdom\": \"root\"\n                    }\n                ],\n                \"type\": \"wanprof\"\n            }\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{ip}}/jsonrpc",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"path": [
						"jsonrpc"
					]
				}
			},
			"response": []
		},
		{
			"name": "4 - Add Script - Configure ZTP Interfaces",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b2acc772-8d1c-473b-869d-f6cb784e1a5e",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "1cd2ab19-8330-48f6-9c8d-3ceb27002e08",
						"exec": [
							"pm.sendRequest({",
							"    url: \"https://\" + pm.environment.get(\"ip\") + \"/jsonrpc\",",
							"    method: 'POST',",
							"    header: \"Content-Type:application/json\",",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({\"session\": pm.environment.get(\"session\"), \"id\": 1, \"method\": \"get\",\"params\": [{\"url\": \"/sys/status\"}]})",
							"    }",
							"}, function (err, response) {",
							"    var sn = response.json().result[0].data[\"Serial Number\"];",
							"    pm.environment.set(\"sn_fmg\", sn)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"session\": \"{{session}}\",\n    \"id\": 1,\n    \"method\": \"set\",\n    \"params\": [\n        {\n            \"url\": \"/dvmdb/adom/{{adom}}/script\",\n            \"data\": [\n                {\n                    \"script_schedule\": null,\n                    \"name\": \"Configure ZTP Interfaces\",\n                    \"type\": \"cli\",\n                    \"desc\": \"\",\n                    \"content\": \"# Interfaces for ZTP device\nconfig system interface\n  edit port4\n    set ip 172.16.0.11 255.255.255.248\n    set type physical\n    set allowaccess ping\n    set vdom root\n  next\n  edit port5\n    set ip 10.50.50.11 255.255.255.248\n    set type physical\n    set allowaccess ping\n    set vdom root\n  next\n  edit port10\n    set mode dhcp\n    set type physical\n    set allowaccess ping http https\n    set vdom root\n  next\nend\",\n                    \"target\": \"device_database\"\n                }\n            ]\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{ip}}/jsonrpc",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"path": [
						"jsonrpc"
					]
				}
			},
			"response": []
		},
		{
			"name": "5 - Exec Script - Configure ZTP interfaces",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e0bf0476-9420-4f73-829e-2ccfa55f313e",
						"exec": [
							"function waitOnTask(retries) {",
							"    if (!retries) {",
							"        pm.test(\"Task completed\", function() {",
							"            pm.expect(0).to.equal(1, \"Timeout while waiting for task completion\");     ",
							"        });",
							"        postman.setNextRequest(null);",
							"    }",
							"    else {",
							"        pm.sendRequest({",
							"            url: \"https://\" + pm.environment.get(\"ip\") + \"/jsonrpc\",",
							"            method: 'POST',",
							"            header: \"Content-Type:application/json\",",
							"            body: {",
							"                mode: 'raw',",
							"                raw: JSON.stringify({\"session\": pm.environment.get(\"session\"), \"id\": 1, \"method\": \"get\",\"params\": [{\"url\": \"/task/task/\" + taskid}]})",
							"            }",
							"        }, function(err, response) {",
							"            var jsonData = response.json();",
							"            if (jsonData.result[0].data.percent == 100) {",
							"                // Task completed",
							"                if (jsonData.result[0].data.num_err) {",
							"                    postman.setNextRequest(null);",
							"                }",
							"                pm.test(\"Task completed\", function() {",
							"                    pm.expect(jsonData.result[0].data.num_err).to.equal(0, \"Failed to add some devices\");     ",
							"                });",
							"            }",
							"            else {",
							"                console.log(\"Task is still not complete\");",
							"                setTimeout(function() {",
							"                    waitOnTask(--retries);",
							"                }, 10000);",
							"            }",
							"        }); ",
							"    }",
							"}",
							"",
							"var jsonData = pm.response.json();",
							"var taskid = jsonData.result[0].data.task;",
							"",
							"waitOnTask(10);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"session\": \"{{session}}\",\n    \"id\": 1,\n    \"method\": \"exec\",\n    \"params\": [\n        {\n            \"url\": \"/dvmdb/adom/{{adom}}/script/execute\",\n            \"data\": {\n                \"adom\": \"{{adom}}\",\n                \"script\": \"Configure ZTP Interfaces\",\n                \"scope\": [\n                    {\n                        \"name\": \"{{name_ztp_fgt}}\",\n                        \"vdom\": \"root\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{ip}}/jsonrpc",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"path": [
						"jsonrpc"
					]
				}
			},
			"response": []
		},
		{
			"name": "6 - Map vl_lan interface",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2e93e2f6-ccda-498f-b4d2-04395de38b7a",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"1\",\n    \"session\": \"{{session}}\",\n    \"method\": \"set\",\n    \"params\": [\n        {\n            \"url\": \"pm/config/adom/{{adom}}/obj/dynamic/interface/vl_lan/dynamic_mapping\",\n            \"data\": [\n                {\n                    \"_scope\": [\n                        {\n                            \"name\": \"{{name_ztp_fgt}}\",\n                            \"vdom\": \"root\"\n                        }\n                    ],\n                    \"local-intf\": [\n                        \"port5\"\n                    ],\n                    \"intrazone-deny\": 0,\n                    \"egress-shaping-profile\": null,\n                    \"ingress-shaping-profile\": null\n                }\n            ]\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{ip}}/jsonrpc",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"path": [
						"jsonrpc"
					]
				}
			},
			"response": []
		},
		{
			"name": "7 - Add CLI Template - Interfaces",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0cdf23b5-e618-4ed8-b0f2-79879717f088",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"session\": \"{{session}}\",\n    \"id\": 1,\n    \"method\": \"set\",\n    \"params\": [\n        {\n            \"url\": \"/pm/config/adom/{{adom}}/obj/cli/template\",\n            \"data\": [\n                {\n                    \"name\": \"ZTP-Interfaces\",\n                    \"script\": \"# Set interfaces on ZTP device\n# Configure tunnel interface IPs\nconfig system interface\n  edit port4\n    set ip 172.16.0.11 255.255.255.248\n    set allowaccess ping\n    set vdom root\n  next\nend\nconfig router static                                                                  \n  edit 1\n    set dst 172.16.0.0 255.255.0.0\n    set gateway 172.16.0.9\n    set device port4\n  next                                                                                \n  edit 2\n    set gateway 203.0.113.1                                                 \n    set device port1                                                               \n  next                                                                            \nend\"\n            }\n            ]\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{ip}}/jsonrpc",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"path": [
						"jsonrpc"
					]
				}
			},
			"response": []
		},
		{
			"name": "8 - Add CLI Template Group",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "96951c6d-89a4-4359-9984-19831595ffc6",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"1\",\n  \"session\": \"{{session}}\",\n  \"method\": \"set\",\n  \"params\": [\n    {\n      \"url\": \"/pm/config/adom/{{adom}}/obj/cli/template-group\",\n      \"data\": {\n        \"name\": \"Spoke-Template-ZTP\",\n        \"member\": [\n          \"Spoke-Overlay\",\n          \"Spoke-Routing-BGP\",\n          \"ZTP-Interfaces\"\n        ]\n      }\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{ip}}/jsonrpc",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"path": [
						"jsonrpc"
					]
				}
			},
			"response": []
		},
		{
			"name": "9 - Assing CLI template Group to ZTP device",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cbb751bc-e0b0-4508-9a58-32e1465dfee9",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"1\",\n  \"session\": \"{{session}}\",\n  \"method\": \"update\",\n  \"params\": [\n    {\n      \"url\": \"/pm/config/adom/{{adom}}/obj/cli/template-group\",\n      \"data\": {\n        \"name\": \"Spoke-Template-ZTP\",\n        \"member\": [\n          \"Spoke-Overlay\",\n          \"Spoke-Routing-BGP\",\n          \"ZTP-Interfaces\"\n        ],\n        \"scope member\": [\n          {\n            \"name\": \"{{name_ztp_fgt}}\",\n            \"vdom\": \"root\"\n          }\n        ]\n      }\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{ip}}/jsonrpc",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"path": [
						"jsonrpc"
					]
				}
			},
			"response": []
		},
		{
			"name": "10 - Install Policy - Spokes",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "47368c44-9185-4059-a62a-40cd0f98867b",
						"exec": [
							"function waitOnTask(retries) {",
							"    if (!retries) {",
							"        pm.test(\"Task completed\", function() {",
							"            pm.expect(0).to.equal(1, \"Timeout while waiting for task completion\");     ",
							"        });",
							"        postman.setNextRequest(null);",
							"    }",
							"    else {",
							"        pm.sendRequest({",
							"            url: \"https://\" + pm.environment.get(\"ip\") + \"/jsonrpc\",",
							"            method: 'POST',",
							"            header: \"Content-Type:application/json\",",
							"            body: {",
							"                mode: 'raw',",
							"                raw: JSON.stringify({\"session\": pm.environment.get(\"session\"), \"id\": 1, \"method\": \"get\",\"params\": [{\"url\": \"/task/task/\" + taskid}]})",
							"            }",
							"        }, function(err, response) {",
							"            var jsonData = response.json();",
							"            if (jsonData.result[0].data.percent == 100) {",
							"                // Task completed",
							"                if (jsonData.result[0].data.num_err) {",
							"                    postman.setNextRequest(null);",
							"                }",
							"                pm.test(\"Task completed\", function() {",
							"                    pm.expect(jsonData.result[0].data.num_err).to.equal(0, \"Failed for some devices\");     ",
							"                });",
							"            }",
							"            else {",
							"                console.log(\"Task is still not complete\");",
							"                setTimeout(function() {",
							"                    waitOnTask(--retries);",
							"                }, 10000);",
							"            }",
							"        }); ",
							"    }",
							"}",
							"",
							"var jsonData = pm.response.json();",
							"var taskid = jsonData.result[0].data.task;",
							"",
							"waitOnTask(10);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"session\": \"{{session}}\",\n    \"id\": 1,\n    \"method\": \"exec\",\n    \"params\": [\n        {\n            \"url\": \"/securityconsole/install/package\",\n            \"data\": [\n                {\n                    \"adom\": \"{{adom}}\",\n                    \"pkg\": \"Branches-PP\",\n                    \"scope\": [\n                        {\n                            \"name\": \"Spokes\"\n                        }\n                    ],\n                    \"flags\": \"none\"\n                }\n            ]\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{ip}}/jsonrpc",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"path": [
						"jsonrpc"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ff753914-1883-4a6a-b6cb-16ece3e63a05",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"",
							"postman.setEnvironmentVariable('session',data['session']);",
							"postman.setEnvironmentVariable('status_code',data['result'][0]['status']['code']);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"session\" : 1,\r\n\t\"id\" : 1,\r\n\t\"method\" : \"exec\",\r\n\t\"params\" : [\r\n\t\t{\r\n\t\t\t\"url\" : \"sys/login/user\",\r\n\t\t\t\"data\" : [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"user\" : \"{{username}}\",\r\n\t\t\t\t\t\"passwd\" : \"{{password}}\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}"
				},
				"url": {
					"raw": "https://{{ip}}/jsonrpc",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"path": [
						"jsonrpc"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "605e2a59-06ea-4d96-b427-d6e6ee9c2dae",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "47f30797-bf90-4813-8d7c-3ca6a6c8b95e",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"HTTP Status code is 200 OK\", function () {",
					"    pm.response.to.have.status(200);",
					"});",
					"",
					"pm.test(\"JSON Status code is 0\", function () {",
					"    var jsonData = pm.response.json();",
					"    if (jsonData.result[0].status.code) {",
					"        postman.setNextRequest(null);",
					"    }    ",
					"    pm.expect(jsonData.result[0].status.code).to.equal(0);",
					"});"
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}